#!/usr/bin/env bash

# General ⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁ #

# iterm2_print_user_vars() {
# 	iterm2_set_user_var terraform "$(starship module terraform)"
# 	iterm2_set_user_var gcloud "$(starship module gcloud)"
# }

alias mkdir='mkdir -vp'
alias df='df -H'
alias rm='rm -iv'
alias mv='mv -iv'
alias cp='cp -irv'
alias grep='grep --color=auto'
alias make='nice make'
alias vim='nvim'

# allow use of unescaped *[] in terminal
alias gcloud='noglob gcloud'
alias rg='noglob rg'

# allow aliases to be sudo’ed
# http://askubuntu.com/questions/22037/aliases-not-available-when-using-sudo
alias sudo='sudo '

# replace cat with bat - https://github.com/sharkdp/bat
alias cat='bat -f --italic-text always --tabs 2'

# replace ping with prettyping - https://github.com/denilsonsa/prettyping
alias ping='prettyping'

# replace top with htop - http://hisham.hm/htop/
alias top='sudo btm -C ~/.config/btm/config.toml'

# replace du with ncdu - https://dev.yorhel.nl/ncdu
alias du='ncdu --color dark -rr -x --exclude .git --exclude node_modules'
alias ncdu='ncdu --color dark -x --exclude .git --exclude node_modules --exclude /System/Volumes/Data'

# install pip packages globally
alias gpip='PIP_REQUIRE_VIRTUALENV=false pip'
alias q='cd ~ && clear'

# directory listing
alias ll='ls -l --no-time --no-user --git-ignore --sort name'
alias la='ls -la --time-style long-iso --no-icons'
alias ls='exa -F -L 2 --git --icons --group-directories-first'

# pretty print $PATH
alias path='print -l $path'
alias fpath='print -l $fpath'

# web page with all assets
alias getpage='wget --no-clobber --page-requisites --html-extension --convert-links --no-host-directories'

# file with original filename
alias get='curl -O -L'

# run command under rosetta
alias intel='arch -x86_64'

# search emojis with preview
alias emoj=$'emoji-fzf preview | fzf --preview \'emoji-fzf get {1}\' | cut -d " " -f 1 | emoji-fzf get | copy'

# replace rm with trash-cli or use default rm -i if trash is not installed
# https://github.com/sindresorhus/trash-cli
if type trash &>/dev/null; then
  alias rm='trash'
else
  alias rm='rm -i'
fi

# Google Cloud ⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁ #

# authenticate request with access token from gcloud
alias gcurl='curl --header "Authorization: Bearer $(gcloud auth print-access-token)"'

# refresh access token before running terraform
alias gtf='GOOGLE_OAUTH_ACCESS_TOKEN="$(gcloud auth print-access-token)" terraform'

alias gssh='_gssh'
alias bqschema='_bqschema'

# find and ssh into a Compute Engine instance
_gssh() {
  name="$1"
  log "Connecting to instance ${name}..."  yellow bold

  filter="(name:${1}* AND status:RUNNING)"
  result="$(gcloud compute instances list --sort-by=-createTime --format="value(name,zone)" --filter="$filter")"
  instance_name="$(echo "$result" | awk 'NR==1 {print $1}')"
  zone="$(echo "$result" | awk 'NR==1 {print $2}')"

  if [ -n "$instance_name" ]; then
    gcloud beta compute ssh "$instance_name" \
      --zone "$(basename "$zone")" \
      --strict-host-key-checking=no
  else
    log_warning 'Instance not found'
  fi
}

# export bigquery table schema
_bqschema() {
  log "Getting BigQuery schema ..." ﬥ purple
  bq --format=json ls "$1" | jq -cr '.[].tableReference.tableId' |
    while read -r table || [ -n "$table" ]; do
      tableref="${1}.${table}"
      printf '\n'
      log "${tableref}:"  red bold white
      bq show --format=json "${tableref}" |
        jq -r '.schema.fields|=sort_by(.name)|del(.schema.fields[].description)|{sourceFormat,createDisposition,writeDisposition,schemaUpdateOptions,timePartitioning,clustering,schema}' | yq -P eval
    done
}

# revive instance if shutdown/preempted
_revive_gce() {
  name="$1"
  log "Reviving instance ${name}..."  yellow

  filter="(name:${1}* AND status:TERMINATED)"
  result="$(gcloud compute instances list --sort-by=-createTime --format="value(name,zone,status)" --filter="$filter")"
  instance_name="$(echo "$result" | awk 'NR==1 {print $1}')"
  zone="$(echo "$result" | awk 'NR==1 {print $2}')"
  status="$(echo "$result" | awk 'NR==1 {print $3}')"

  if [ "$status" = "TERMINATED" ]; then
    gcloud compute instances start "--zone=$zone" "$instance_name"
  fi
}

# Terraform ⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁⌁ #

alias tf='_tf'
alias tg='terragrunt'

# augment terraform command with abbrebiated flags + other shortcuts
_tf() {
  opts=()

  # allow abbreviated flags
  for i in "${@}"; do
    case "$i" in
    '-t')
      opts+=('-target')
      ;;
    '-aa')
      opts+=('-auto-approve')
      ;;
    '-r')
      opts+=('-refresh=false')
      ;;
    '-trace')
      tflog='trace'
      ;;
    '-debug')
      tflog='debug'
      ;;
    *)
      opts+=("$i")
      ;;
    esac
  done

  # default flags
  if [[ -f "./terraform.tfvars" ]] && [[ "$1" == "apply" || "$1" == "plan" ]]; then
    opts+=('-var-file=terraform.tfvars')
  fi

  if [[ "$1" == "apply" ]]; then
    opts+=('-compact-warnings')
    opts+=('-parallelism=5')
  fi

  # refresh google cloud credentials
  if [[ $(rg -l --pre-glob '*.tf' 'provider "google"') ]]; then
    access_token="$(gcloud auth print-access-token)"
  fi

  GOOGLE_OAUTH_ACCESS_TOKEN="$access_token" TF_LOG="$tflog" \
    noglob terraform "${opts[@]}"
}
